<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="350" height="200" xmlns:components="components.*"
		 title="Private Chat Room" skinClass="skins.ChatWindowSkin" 
		 implements="interfaces.IpopUp"
		 close="chatStopped()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="goBackToLobby", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.encast.AppManager;
			import com.encast.NetConnectionManager;
			import com.encast.UserRole;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			private var _nc:NetConnectionManager;
			private var _so:SharedObject;
			
			private var _userID:Number;
			private var _userName:String;
			private var _lobby:AdminLobby;
			private var _toUserID:Number;
			private var _withUserName:String;
			private var _userlistPod:UserList;
			
			public function initializePrivateChat(nc:NetConnectionManager, userID:Number, userName:String, toUserID:Number,userlistPod:UserList=null):void{
				_nc = nc;
				_userID = userID;
				_userName = userName;
				_toUserID = toUserID;
				_userlistPod = userlistPod;
				_so = SharedObject.getRemote("chatPrivate", _nc.uri, false);
				_so.addEventListener(SyncEvent.SYNC, onSync);
				_so.client = this;
				_so.connect(_nc);
				if(AppManager.getInstance().userRole == UserRole.MODERATOR1)
				{
					_userID = 0;
				}
				
				var withUserName:String ;
			}
			
			private function onSync(e:SyncEvent):void{
				
			}
			
			public function receiveMessage(msg:String, userID:Number, privateChat:Boolean, toUserID:Number):void{
				if(privateChat == true)
				{
					if(_userID == toUserID || _userID == userID)
					{
						chatArea.htmlText += "<font color='#333333'>" + msg + "</font></br>";
					}
				}
				else
				{
					lobby.receiveMessage(msg, userID, privateChat, toUserID);
				}
			}
			
			public function showAdminMessage(msg:String):void{
				chatArea.htmlText += "<font color='#FF0000'><b>Admin</b>: " + msg + "</font></br>";
			}
			
			private function backToLobbyButton_clickHandler(e:MouseEvent):void{
				var goBackToLobbyEvent:Event = new Event("goBackToLobby");
				dispatchEvent(goBackToLobbyEvent);
			}
			
			//need this in to handle the error that will happen, this function does nothing.
			public function sendMessage(msg:String, clr:String, uID:Number, pC:Boolean):void{
				
			}
			
			private function sendTheMessage(msg:String):void{
				//grab the colour
				var colour:String = colorPicker.selectedColor.toString(16);
				
				_nc.call("sendMessage", null, msg, "#" + colour, _userID.toString(), AppManager.getInstance().showID,true, _toUserID);
				chatTextInput.text = "";
				chatTextInput.setFocus();
			}
			
			protected function sendButton_clickHandler(event:MouseEvent):void{
				var msg:String = chatTextInput.text;
				if(msg != ""){
					sendTheMessage(msg);
				}
			}
			
			protected function chatTextInput_enterHandler(event:FlexEvent):void{
				var msg:String = chatTextInput.text;
				if(msg != ""){
					sendTheMessage(msg);
				}
			}
			
			public function chatStopped():void
			{
				if(AppManager.getInstance().userRole == UserRole.MODERATOR1)
				{
					_userName = "";
					_withUserName = "";
					_nc.call("closeChat" ,null, _userID,_toUserID);
				}
			}
			
			protected function chatArea_updateCompleteHandler(event:FlexEvent):void
			{
				chatArea.verticalScrollPosition = chatArea.maxVerticalScrollPosition;
			}
			
			public function get lobby():AdminLobby
			{
				return _lobby;
			}
			
			public function set lobby(value:AdminLobby):void
			{
				_lobby = value;
			}
			
			public function closePrivateChat(userInfo:Object):void
			{
				if(_userlistPod != null)
				{
					_userlistPod.resetUsers(userInfo);
					if(_userID == userInfo.uniqueUserID || _userID == userInfo.withUserID)
					{
						PopUpManager.removePopUp(this);
					}
				}
			}
			
			protected function chatArea_creationCompleteHandler(event:FlexEvent):void
			{
				if(_userName != "" && _withUserName != "" && _userName != null && _withUserName != null)
				{
					chatArea.htmlText += "<font color='#333333'>" +_userName+ " is in private chat with " + _withUserName+ "</font></br>";
				}
			}
			
			public function closeWindow():void
			{
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	
	
	<s:Button right="0" top="5" label="Back to Lobby" id="backToLobbyButton" click="backToLobbyButton_clickHandler(event)"/>
	
	<!--<s:HGroup left="0" right="0" top="30" height="160" gap="20" horizontalAlign="center">
		<components:VideoPod width="160" height="160" id="videoPod1" publishStart="videoPod_publishStartHandler(event)" publishStop="videoPod_publishStopHandler(event)" streamStop="videoPod_streamStopHandler(event)" />
		<components:VideoPod width="160" height="160" id="videoPod2" publishStart="videoPod_publishStartHandler(event)" publishStop="videoPod_publishStopHandler(event)" streamStop="videoPod_streamStopHandler(event)" />
	</s:HGroup>-->
	
	<s:Group id="chatPod" left="0" right="0" top="0" height="100%">
		<mx:TextArea id="chatArea" editable="false" updateComplete="chatArea_updateCompleteHandler(event)" left="0" top="0" bottom="35" width="100%" color="0x000000" creationComplete="chatArea_creationCompleteHandler(event)"/>
		<s:TextInput id="chatTextInput" left="5" right="110" bottom="5" enter="chatTextInput_enterHandler(event)"/>
		<s:Button id="sendButton" right="5" bottom="5" width="70" label="Send" click="sendButton_clickHandler(event)"/>
		<mx:ColorPicker right="80" bottom="5" id="colorPicker"/>
	</s:Group>
</s:TitleWindow>
